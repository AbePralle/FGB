#===============================================================================
# WorldMapMaker.rogue
# July 6, 2020
#===============================================================================
$requireRogue "1.7.5"

uses Bitmap

WorldMapMaker()

class WorldMapMaker
  METHODS
    method init
      File.create_folder( "Images" )
      #forEach (filepath in File.listing("../../Data/Levels/L*.lvl"))
        local filepath = "../../Data/Levels/L0001.lvl"
        println filepath
        local level = FGBLevel( filepath )
        level.render.save_as_png( "Images/$.png"(level.level_number.format("04")) )
        #endForEach
endClass

class Graphics [singleton]
  PROPERTIES
    tiles = Bitmap[]

  METHODS
    method init
      tiles.add( load_with_black_as_transparent("../LevelEditor/background0001-1535.bmp").split(32,64) )
      tiles.add( load_with_black_as_transparent("../LevelEditor/objects2048-2303.bmp").split(32,32) )

    method load_with_black_as_transparent( filename:String )->Bitmap
      local bmp = Bitmap( File(filename) )
      forEach (pixel at index in bmp.pixels)
        if (pixel.argb == 0xff000000)
          bmp.pixels[ index ] = Color(0)
        endIf
      endForEach
      return bmp
endClass


class FGBLevel
  PROPERTIES
    filename     : String
    level_number : Int32
    version      : Int32
    classes      = Int32[]
    first_character_index : Int32
    first_character_id    : Int32
    width        : Int32
    pitch        : Int32
    height       : Int32
    tiles        = Int32[]
    bg_color     : Color

  METHODS
    method init( filename )
      level_number = filename.after_last('L').before_first('_')->Int32
      local reader = File.reader( filename )
      version = reader.read

      local class_count = reader.read
      classes.add( 0 )  # index 0 is always empty space

      block
        first_character_index = reader.read
        first_character_id    = reader.read
        first_character_id    = first_character_id | (reader.read :<<: 8)
      endBlock

      block
        loop (class_count)
          local low  = reader.read : Int32
          local high = reader.read : Int32
          local cls = ((high:<<:8) | low)
          if (cls < first_character_id) --cls
          if (cls == 1532) cls = 0
          classes.add( cls )
        endLoop
      endBlock

      width  = reader.read
      pitch  = reader.read
      height = reader.read

      trace width, pitch, height
      forEach (j in 0..<height)
        forEach (i in 0..<width)
          local index = reader.read
trace index, classes.count
          require (index >= 0 and index < classes.count)
          tiles.add( classes[index] )
        endForEach
      endForEach

      forEach (cls at index in tiles)
        which (cls)
          case 2102, 2120, 2140, 2168, 2222, 2230, 2238, 2246, 2258, 2268, 2298, 2319, 2335,
               2343, 2351, 2362, 2370, 2374, 2390, 2408, 2418, 2426, 2434, 2446
            tiles[index+1]       = cls+1
            tiles[index+width]   = cls+2
            tiles[index+width+1] = cls+3
        endWhich
      endForEach

      local color_low  = reader.read : Int32
      local color_high = reader.read : Int32
      local color = (color_high :<<: 8) | color_low
      bg_color = Color( color_5_to_8(color), color_5_to_8(color:>>:5), color_5_to_8(color:>>:10) )

      # Waypoint List
      # TODO (investigate starting at Tools/LevelEditor/Source/Controls.cpp line 393)

      # Zones
      # TODO

      # Exits
      # TODO

      # Exit Links
      # TODO

    method get( i:Int32, j:Int32 )->Int32
      return tiles[ j*width + i ]

    method render->Bitmap
      local result = Bitmap( (width-2)*16, (height-2)*16, bg_color )
      forEach (j in 1..<height-1)
        forEach (i in 1..<width-1)
          local tile = this.get(i,j)
          if (tile > 0)
            Graphics.tiles[ this.get(i,j) ].blit( result, (i-1)*16, (j-1)*16, BitmapBlitFn.ALPHA )
          endIf
        endForEach
      endForEach
      return result

    method color_5_to_8( c:Int32 )->Int32
      c &= 0x1F
      return ((c / Real64(0x1F)) * 255)->Int32
endClass
